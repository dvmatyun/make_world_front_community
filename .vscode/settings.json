{
    "[dart]": {
      "editor.codeActionsOnSave": {
        "source.fixAll": true
      },
      // Disables built-in highlighting of words that match your selection. Without
      // this, all instances of the selected text will be highlighted, interfering
      // with Dart's ability to highlight only exact references to the selected variable.
      "editor.selectionHighlight": false,
      // By default, VS Code prevents code completion from popping open when in
      // "snippet mode" (editing placeholders in inserted code). Setting this option
      // to `false` stops that and allows completion to open as normal, as if you
      // weren't in a snippet placeholder.
      "editor.suggest.snippetsPreventQuickSuggestions": false,
      // By default, VS Code will pre-select the most recently used item from code
      // completion. This is usually not the most relevant item.
      //
      // "first" will always select top item
      // "recentlyUsedByPrefix" will filter the recently used items based on the
      //     text immediately preceding where completion was invoked.
      "editor.suggestSelection": "first",
      // Allows pressing <TAB> to complete snippets such as `for` even when the
      // completion list is not visible.
      "editor.tabCompletion": "onlySnippets",
      // By default, VS Code will populate code completion with words found in the
      // current file when a language service does not provide its own completions.
      // This results in code completion suggesting words when editing comments and
      // strings. This setting will prevent that.
      "editor.wordBasedSuggestions": false,
      // Draw a guide line at 120 characters, where Dart's formatting will wrap code.
      "editor.rulers": [
        120
      ],
      "editor.defaultFormatter": "Dart-Code.dart-code",
      "editor.formatOnPaste": true,
      "editor.formatOnSave": true,
      //"editor.formatOnType" : true,
      "editor.insertSpaces": true
    },
    "dart.lineLength": 120,
    "dart.doNotFormat": [
      "**.g.dart",
      "**.gql.dart",
      "**.freezed.dart",
      "**.config.dart",
      "**.mocks.dart",
      "**.gen.dart"
    ],
    "dart.flutterSdkPath": "C:\\Dima\\Repos\\make_world_front\\.fvm\\flutter_sdk",
    // Remove .fvm files from search
    "search.exclude": {
      "**/.fvm": true,
      ".firebase": true,
      ".dart_tool": true,
      "coverage": true,
      "build": true,
    },
    // Remove from file watching
    "files.watcherExclude": {
      "**/.fvm": true,
      ".firebase": true,
      ".dart_tool": true,
      "coverage": true,
      "build": true,
    },
    "files.associations": {
      "*.drift": "sql"
    },
    // Causes the debug view to automatically appear when a breakpoint is hit. This
    // setting is global and not configurable per-language.
    "debug.openDebug": "openOnDebugBreak",
    "explorer.fileNesting.enabled": true,
    "explorer.fileNesting.expand": false,
    "explorer.fileNesting.patterns": {
      "pubspec.yaml": ".flutter-plugins, .packages, .dart_tool, .flutter-plugins-dependencies, .metadata, .packages, pubspec.lock, build.yaml, analysis_options.yaml, all_lint_rules.yaml, dart*.yaml, flutter*.yaml, icons_launcher.yaml",
      ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
      "readme.*": "authors, backers.md, changelog*, citation*, code_of_conduct.md, codeowners, contributing.md, contributors, copying, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors.md",
      "*.dart": "$(capture).g.dart, $(capture).freezed.dart, $(capture).config.dart",
      "*.graphql": "$(capture).gql.dart, $(capture).*.gql.dart",
      "schema.graphql": "schema.schema.gql.dart",
      "firebase.json": ".firebaserc"
    },
    "java.configuration.updateBuildConfiguration": "disabled"
  }